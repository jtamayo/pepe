// Problems
getChars	(II[CI)V;

// Modifiers

setLength	(I)V;
setCharAt	(IC)V;
append	(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder;;
append	(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;;
append	(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;;
append	(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;;
append	(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;;
append	([C)Ljava/lang/AbstractStringBuilder;;
append	([CII)Ljava/lang/AbstractStringBuilder;;
append	(Z)Ljava/lang/AbstractStringBuilder;;
append	(C)Ljava/lang/AbstractStringBuilder;;
append	(I)Ljava/lang/AbstractStringBuilder;;
append	(J)Ljava/lang/AbstractStringBuilder;;
append	(F)Ljava/lang/AbstractStringBuilder;;
append	(D)Ljava/lang/AbstractStringBuilder;;
delete	(II)Ljava/lang/AbstractStringBuilder;;
appendCodePoint	(I)Ljava/lang/AbstractStringBuilder;;
deleteCharAt	(I)Ljava/lang/AbstractStringBuilder;;
replace	(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder;;
insert	(I[CII)Ljava/lang/AbstractStringBuilder;;
insert	(ILjava/lang/Object;)Ljava/lang/AbstractStringBuilder;;
insert	(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;;
insert	(I[C)Ljava/lang/AbstractStringBuilder;;
insert	(ILjava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;;
insert	(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;;
insert	(IZ)Ljava/lang/AbstractStringBuilder;;
insert	(IC)Ljava/lang/AbstractStringBuilder;;
insert	(II)Ljava/lang/AbstractStringBuilder;;
insert	(IJ)Ljava/lang/AbstractStringBuilder;;
insert	(IF)Ljava/lang/AbstractStringBuilder;;
insert	(ID)Ljava/lang/AbstractStringBuilder;;
reverse	()Ljava/lang/AbstractStringBuilder;;
// CAREFUL: Check the methods you're overwriting are not abstract.
mv = cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "toString", "()Ljava/lang/String;", null, null);

// Readers


length	()I;
capacity	()I;
charAt	(I)C;
codePointAt	(I)I;
codePointBefore	(I)I;
codePointCount	(II)I;
offsetByCodePoints	(II)I;
substring	(I)Ljava/lang/String;;
subSequence	(II)Ljava/lang/CharSequence;;
subSequence	(II)Ljava/lang/CharSequence;;
substring	(II)Ljava/lang/String;;
indexOf	(Ljava/lang/String;)I;
indexOf	(Ljava/lang/String;I)I;
lastIndexOf	(Ljava/lang/String;)I;
lastIndexOf	(Ljava/lang/String;I)I;








=========
ClassWriter cw = new ClassWriter(0);
FieldVisitor fv;
MethodVisitor mv;
AnnotationVisitor av0;

cw.visit(V1_5, ACC_SUPER + ACC_ABSTRACT, "java/lang/AbstractStringBuilder", null, "java/lang/Object", new String[] { "java/lang/Appendable", "java/lang/CharSequence" });

cw.visitSource("AbstractStringBuilder.java", null);

{
fv = cw.visitField(0, "value", "[C", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(0, "count", "I", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_FINAL + ACC_STATIC, "sizeTable", "[I", null, null);
fv.visitEnd();
}
{
mv = cw.visitMethod(0, "<init>", "()V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(38, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(39, l1);
mv.visitInsn(RETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "<init>", "(I)V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(44, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(45, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(46, l2);
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "length", "()I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(55, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "capacity", "()I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(66, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "ensureCapacity", "(I)V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(84, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(85, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l1);
mv.visitLineNumber(87, l1);
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "expandCapacity", "(I)V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(94, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_2);
mv.visitInsn(IMUL);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(95, l1);
mv.visitVarInsn(ILOAD, 2);
Label l2 = new Label();
mv.visitJumpInsn(IFGE, l2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(96, l3);
mv.visitLdcInsn(new Integer(2147483647));
mv.visitVarInsn(ISTORE, 2);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l2);
mv.visitLineNumber(97, l2);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitJumpInsn(IF_ICMPLE, l4);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(98, l5);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ISTORE, 2);
mv.visitLabel(l4);
mv.visitLineNumber(100, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOf", "([CI)[C");
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(101, l6);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "trimToSize", "()V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(111, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(112, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOf", "([CI)[C");
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitLabel(l1);
mv.visitLineNumber(114, l1);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setLength", "(I)V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(142, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFGE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(143, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitLineNumber(144, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(145, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l3);
mv.visitLineNumber(147, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(148, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
Label l7 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l7);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(149, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(ICONST_0);
mv.visitInsn(CASTORE);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(148, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l5);
mv.visitLineNumber(151, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitLabel(l7);
mv.visitLineNumber(153, l7);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "charAt", "(I)C", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(173, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l2);
mv.visitLabel(l1);
mv.visitLineNumber(174, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitLineNumber(175, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(CALOAD);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "codePointAt", "(I)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(200, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l2);
mv.visitLabel(l1);
mv.visitLineNumber(201, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitLineNumber(203, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "codePointAt", "([CI)I");
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "codePointBefore", "(I)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(228, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(229, l1);
mv.visitVarInsn(ILOAD, 2);
Label l2 = new Label();
mv.visitJumpInsn(IFLT, l2);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l3);
mv.visitLabel(l2);
mv.visitLineNumber(230, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l3);
mv.visitLineNumber(232, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "codePointBefore", "([CI)I");
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "codePointCount", "(II)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(256, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitJumpInsn(IF_ICMPGT, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
mv.visitLabel(l1);
mv.visitLineNumber(257, l1);
mv.visitTypeInsn(NEW, "java/lang/IndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IndexOutOfBoundsException", "<init>", "()V");
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitLineNumber(259, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "codePointCountImpl", "([CII)I");
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "offsetByCodePoints", "(II)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(282, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
mv.visitLabel(l1);
mv.visitLineNumber(283, l1);
mv.visitTypeInsn(NEW, "java/lang/IndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IndexOutOfBoundsException", "<init>", "()V");
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitLineNumber(285, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "offsetByCodePointsImpl", "([CIIII)I");
mv.visitInsn(IRETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getChars", "(II[CI)V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(322, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFGE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(323, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitLineNumber(324, l1);
mv.visitVarInsn(ILOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IFLT, l3);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l4);
mv.visitLabel(l3);
mv.visitLineNumber(325, l3);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l4);
mv.visitLineNumber(326, l4);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(327, l6);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitLdcInsn("srcBegin > srcEnd");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l5);
mv.visitLineNumber(328, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(329, l7);
mv.visitInsn(RETURN);
mv.visitMaxs(6, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setCharAt", "(IC)V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(346, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l2);
mv.visitLabel(l1);
mv.visitLineNumber(347, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitLineNumber(348, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(CASTORE);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(349, l3);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(363, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(385, l0);
mv.visitVarInsn(ALOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
mv.visitLdcInsn("null");
mv.visitVarInsn(ASTORE, 1);
mv.visitLabel(l1);
mv.visitLineNumber(386, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I");
mv.visitVarInsn(ISTORE, 2);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(387, l2);
mv.visitVarInsn(ILOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IFNE, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitLabel(l3);
mv.visitLineNumber(388, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(389, l4);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(390, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l5);
mv.visitLineNumber(391, l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getChars", "(II[CI)V");
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(392, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(393, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(398, l0);
mv.visitVarInsn(ALOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(399, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("null");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitLabel(l1);
mv.visitLineNumber(400, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "length", "()I");
mv.visitVarInsn(ISTORE, 2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(401, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(402, l4);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(403, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l5);
mv.visitLineNumber(404, l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "getChars", "(II[CI)V");
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(405, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(406, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(411, l0);
mv.visitVarInsn(ALOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(412, l2);
mv.visitLdcInsn("null");
mv.visitVarInsn(ASTORE, 1);
mv.visitLabel(l1);
mv.visitLineNumber(413, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(INSTANCEOF, "java/lang/String");
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(414, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(CHECKCAST, "java/lang/String");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitLabel(l3);
mv.visitLineNumber(415, l3);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(INSTANCEOF, "java/lang/StringBuffer");
Label l5 = new Label();
mv.visitJumpInsn(IFEQ, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(416, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(CHECKCAST, "java/lang/StringBuffer");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitLabel(l5);
mv.visitLineNumber(417, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "length", "()I");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(450, l0);
mv.visitVarInsn(ALOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(451, l2);
mv.visitLdcInsn("null");
mv.visitVarInsn(ASTORE, 1);
mv.visitLabel(l1);
mv.visitLineNumber(452, l1);
mv.visitVarInsn(ILOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IFLT, l3);
mv.visitVarInsn(ILOAD, 3);
mv.visitJumpInsn(IFLT, l3);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitJumpInsn(IF_ICMPGT, l3);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "length", "()I");
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l4);
mv.visitLabel(l3);
mv.visitLineNumber(453, l3);
mv.visitTypeInsn(NEW, "java/lang/IndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("start ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitLdcInsn(", end ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitLdcInsn(", s.length() ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "length", "()I");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IndexOutOfBoundsException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l4);
mv.visitLineNumber(456, l4);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 4);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(457, l5);
mv.visitVarInsn(ILOAD, 4);
Label l6 = new Label();
mv.visitJumpInsn(IFNE, l6);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(458, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitLabel(l6);
mv.visitLineNumber(459, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 5);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(460, l8);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l9);
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(461, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l9);
mv.visitLineNumber(462, l9);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 6);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 3);
Label l12 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l12);
Label l13 = new Label();
mv.visitLabel(l13);
mv.visitLineNumber(463, l13);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 6);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "charAt", "(I)C");
mv.visitInsn(CASTORE);
Label l14 = new Label();
mv.visitLabel(l14);
mv.visitLineNumber(462, l14);
mv.visitIincInsn(6, 1);
mv.visitJumpInsn(GOTO, l11);
mv.visitLabel(l12);
mv.visitLineNumber(464, l12);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 5);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l15 = new Label();
mv.visitLabel(l15);
mv.visitLineNumber(465, l15);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 7);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "([C)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(485, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(486, l1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(487, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l2);
mv.visitLineNumber(488, l2);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(489, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(490, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "([CII)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(513, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(514, l1);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(515, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l2);
mv.visitLineNumber(516, l2);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(517, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(518, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(Z)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(533, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(534, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(535, l3);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l4);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(536, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l4);
mv.visitLineNumber(537, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitIntInsn(BIPUSH, 116);
mv.visitInsn(CASTORE);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(538, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitIntInsn(BIPUSH, 114);
mv.visitInsn(CASTORE);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(539, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitIntInsn(BIPUSH, 117);
mv.visitInsn(CASTORE);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(540, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitIntInsn(BIPUSH, 101);
mv.visitInsn(CASTORE);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(541, l9);
Label l10 = new Label();
mv.visitJumpInsn(GOTO, l10);
mv.visitLabel(l1);
mv.visitLineNumber(542, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(ICONST_5);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 2);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitLineNumber(543, l11);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l12 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l12);
Label l13 = new Label();
mv.visitLabel(l13);
mv.visitLineNumber(544, l13);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l12);
mv.visitLineNumber(545, l12);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitIntInsn(BIPUSH, 102);
mv.visitInsn(CASTORE);
Label l14 = new Label();
mv.visitLabel(l14);
mv.visitLineNumber(546, l14);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitIntInsn(BIPUSH, 97);
mv.visitInsn(CASTORE);
Label l15 = new Label();
mv.visitLabel(l15);
mv.visitLineNumber(547, l15);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitIntInsn(BIPUSH, 108);
mv.visitInsn(CASTORE);
Label l16 = new Label();
mv.visitLabel(l16);
mv.visitLineNumber(548, l16);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitIntInsn(BIPUSH, 115);
mv.visitInsn(CASTORE);
Label l17 = new Label();
mv.visitLabel(l17);
mv.visitLineNumber(549, l17);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitIntInsn(BIPUSH, 101);
mv.visitInsn(CASTORE);
mv.visitLabel(l10);
mv.visitLineNumber(551, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(C)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(570, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(571, l1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(572, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l2);
mv.visitLineNumber(573, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(CASTORE);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(574, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(I)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(589, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitLdcInsn(new Integer(-2147483648));
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(590, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("-2147483648");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(POP);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(591, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitLabel(l1);
mv.visitLineNumber(593, l1);
mv.visitVarInsn(ILOAD, 1);
Label l4 = new Label();
mv.visitJumpInsn(IFGE, l4);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(INEG);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/AbstractStringBuilder", "stringSizeOfInt", "(I)I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/AbstractStringBuilder", "stringSizeOfInt", "(I)I");
mv.visitLabel(l5);
mv.visitVarInsn(ISTORE, 2);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(595, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 3);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(596, l7);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l8 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l8);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(597, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l8);
mv.visitLineNumber(598, l8);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "getChars", "(II[C)V");
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(599, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitLineNumber(600, l11);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "stringSizeOfInt", "(I)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(608, l0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(609, l1);
mv.visitVarInsn(ILOAD, 0);
mv.visitFieldInsn(GETSTATIC, "java/lang/AbstractStringBuilder", "sizeTable", "[I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IALOAD);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGT, l2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(610, l3);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitLineNumber(608, l2);
mv.visitIincInsn(1, 1);
mv.visitJumpInsn(GOTO, l1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(J)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(625, l0);
mv.visitVarInsn(LLOAD, 1);
mv.visitLdcInsn(new Long(-9223372036854775808L));
mv.visitInsn(LCMP);
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(626, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("-9223372036854775808");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(POP);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(627, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitLabel(l1);
mv.visitLineNumber(629, l1);
mv.visitVarInsn(LLOAD, 1);
mv.visitInsn(LCONST_0);
mv.visitInsn(LCMP);
Label l4 = new Label();
mv.visitJumpInsn(IFGE, l4);
mv.visitVarInsn(LLOAD, 1);
mv.visitInsn(LNEG);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/AbstractStringBuilder", "stringSizeOfLong", "(J)I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitVarInsn(LLOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/AbstractStringBuilder", "stringSizeOfLong", "(J)I");
mv.visitLabel(l5);
mv.visitVarInsn(ISTORE, 3);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(631, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(632, l7);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l8 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l8);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(633, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l8);
mv.visitLineNumber(634, l8);
mv.visitVarInsn(LLOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "getChars", "(JI[C)V");
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(635, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitLineNumber(636, l11);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "stringSizeOfLong", "(J)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(641, l0);
mv.visitLdcInsn(new Long(10L));
mv.visitVarInsn(LSTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(642, l1);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 4);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(BIPUSH, 19);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(643, l4);
mv.visitVarInsn(LLOAD, 0);
mv.visitVarInsn(LLOAD, 2);
mv.visitInsn(LCMP);
Label l5 = new Label();
mv.visitJumpInsn(IFGE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(644, l6);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IRETURN);
mv.visitLabel(l5);
mv.visitLineNumber(645, l5);
mv.visitLdcInsn(new Long(10L));
mv.visitVarInsn(LLOAD, 2);
mv.visitInsn(LMUL);
mv.visitVarInsn(LSTORE, 2);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(642, l7);
mv.visitIincInsn(4, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitLineNumber(647, l3);
mv.visitIntInsn(BIPUSH, 19);
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(F)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(662, l0);
mv.visitTypeInsn(NEW, "sun/misc/FloatingDecimal");
mv.visitInsn(DUP);
mv.visitVarInsn(FLOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "sun/misc/FloatingDecimal", "<init>", "(F)V");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "sun/misc/FloatingDecimal", "appendTo", "(Ljava/lang/Appendable;)V");
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(663, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "append", "(D)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(678, l0);
mv.visitTypeInsn(NEW, "sun/misc/FloatingDecimal");
mv.visitInsn(DUP);
mv.visitVarInsn(DLOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "sun/misc/FloatingDecimal", "<init>", "(D)V");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "sun/misc/FloatingDecimal", "appendTo", "(Ljava/lang/Appendable;)V");
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(679, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "delete", "(II)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(697, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFGE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(698, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitLineNumber(699, l1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(700, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ISTORE, 2);
mv.visitLabel(l3);
mv.visitLineNumber(701, l3);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(702, l6);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "()V");
mv.visitInsn(ATHROW);
mv.visitLabel(l5);
mv.visitLineNumber(703, l5);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 3);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(704, l7);
mv.visitVarInsn(ILOAD, 3);
Label l8 = new Label();
mv.visitJumpInsn(IFLE, l8);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(705, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(706, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitLabel(l8);
mv.visitLineNumber(708, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "appendCodePoint", "(I)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(731, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isValidCodePoint", "(I)Z");
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(732, l2);
mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "()V");
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitLineNumber(734, l1);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(735, l3);
mv.visitVarInsn(ILOAD, 1);
mv.visitLdcInsn(new Integer(65536));
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l4);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(736, l5);
mv.visitIincInsn(2, 1);
mv.visitLabel(l4);
mv.visitLineNumber(738, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 3);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(739, l6);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l7 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l7);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(740, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l7);
mv.visitLineNumber(742, l7);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_1);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l9);
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(743, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(DUP_X1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(I2C);
mv.visitInsn(CASTORE);
Label l11 = new Label();
mv.visitJumpInsn(GOTO, l11);
mv.visitLabel(l9);
mv.visitLineNumber(745, l9);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toSurrogates", "(I[CI)V");
Label l12 = new Label();
mv.visitLabel(l12);
mv.visitLineNumber(746, l12);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitLabel(l11);
mv.visitLineNumber(748, l11);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "deleteCharAt", "(I)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(769, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l2);
mv.visitLabel(l1);
mv.visitLineNumber(770, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitLineNumber(771, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(772, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(773, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "replace", "(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(796, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFGE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(797, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitLineNumber(798, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(799, l4);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitLdcInsn("start > length()");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l3);
mv.visitLineNumber(800, l3);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(801, l6);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitLdcInsn("start > end");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l5);
mv.visitLineNumber(803, l5);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l7 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l7);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(804, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ISTORE, 2);
mv.visitLabel(l7);
mv.visitLineNumber(805, l7);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I");
mv.visitVarInsn(ISTORE, 4);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(806, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 5);
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(807, l10);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l11 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l11);
Label l12 = new Label();
mv.visitLabel(l12);
mv.visitLineNumber(808, l12);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l11);
mv.visitLineNumber(810, l11);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l13 = new Label();
mv.visitLabel(l13);
mv.visitLineNumber(811, l13);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getChars", "([CI)V");
Label l14 = new Label();
mv.visitLabel(l14);
mv.visitLineNumber(812, l14);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 5);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l15 = new Label();
mv.visitLabel(l15);
mv.visitLineNumber(813, l15);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "substring", "(I)Ljava/lang/String;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(828, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "substring", "(II)Ljava/lang/String;");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "subSequence", "(II)Ljava/lang/CharSequence;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(858, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "substring", "(II)Ljava/lang/String;");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "substring", "(II)Ljava/lang/String;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(876, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFGE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(877, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitLineNumber(878, l1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(879, l4);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l3);
mv.visitLineNumber(880, l3);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(881, l6);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l5);
mv.visitLineNumber(882, l5);
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CII)V");
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(I[CII)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(909, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "length", "()I");
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
mv.visitLabel(l1);
mv.visitLineNumber(910, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitLineNumber(911, l2);
mv.visitVarInsn(ILOAD, 3);
Label l3 = new Label();
mv.visitJumpInsn(IFLT, l3);
mv.visitVarInsn(ILOAD, 4);
mv.visitJumpInsn(IFLT, l3);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ISUB);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l4);
mv.visitLabel(l3);
mv.visitLineNumber(912, l3);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("offset ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitLdcInsn(", len ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitLdcInsn(", str.length ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l4);
mv.visitLineNumber(915, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 5);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(916, l5);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l6);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(917, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l6);
mv.visitLineNumber(918, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(919, l8);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(920, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 5);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(921, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(ILjava/lang/Object;)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(943, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(978, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "length", "()I");
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
mv.visitLabel(l1);
mv.visitLineNumber(979, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitLineNumber(980, l2);
mv.visitVarInsn(ALOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IFNONNULL, l3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(981, l4);
mv.visitLdcInsn("null");
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l3);
mv.visitLineNumber(982, l3);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I");
mv.visitVarInsn(ISTORE, 3);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(983, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(984, l6);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l7 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l7);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(985, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l7);
mv.visitLineNumber(986, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(987, l9);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getChars", "([CI)V");
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(988, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitLineNumber(989, l11);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(I[C)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1014, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "length", "()I");
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
mv.visitLabel(l1);
mv.visitLineNumber(1015, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitLineNumber(1016, l2);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(1017, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(1018, l4);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(1019, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l5);
mv.visitLineNumber(1020, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(1021, l7);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(1022, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(1023, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(ILjava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1046, l0);
mv.visitVarInsn(ALOAD, 2);
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(1047, l2);
mv.visitLdcInsn("null");
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l1);
mv.visitLineNumber(1048, l1);
mv.visitVarInsn(ALOAD, 2);
mv.visitTypeInsn(INSTANCEOF, "java/lang/String");
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(1049, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitTypeInsn(CHECKCAST, "java/lang/String");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitLabel(l3);
mv.visitLineNumber(1050, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "length", "()I");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1099, l0);
mv.visitVarInsn(ALOAD, 2);
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(1100, l2);
mv.visitLdcInsn("null");
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l1);
mv.visitLineNumber(1101, l1);
mv.visitVarInsn(ILOAD, 1);
Label l3 = new Label();
mv.visitJumpInsn(IFLT, l3);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "length", "()I");
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l4);
mv.visitLabel(l3);
mv.visitLineNumber(1102, l3);
mv.visitTypeInsn(NEW, "java/lang/IndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("dstOffset ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IndexOutOfBoundsException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l4);
mv.visitLineNumber(1103, l4);
mv.visitVarInsn(ILOAD, 3);
Label l5 = new Label();
mv.visitJumpInsn(IFLT, l5);
mv.visitVarInsn(ILOAD, 4);
mv.visitJumpInsn(IFLT, l5);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitJumpInsn(IF_ICMPGT, l5);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "length", "()I");
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l6);
mv.visitLabel(l5);
mv.visitLineNumber(1104, l5);
mv.visitTypeInsn(NEW, "java/lang/IndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("start ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitLdcInsn(", end ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitLdcInsn(", s.length() ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "length", "()I");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IndexOutOfBoundsException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l6);
mv.visitLineNumber(1107, l6);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 5);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(1108, l7);
mv.visitVarInsn(ILOAD, 5);
Label l8 = new Label();
mv.visitJumpInsn(IFNE, l8);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(1109, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitLabel(l8);
mv.visitLineNumber(1110, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 6);
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(1111, l10);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l11 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l11);
Label l12 = new Label();
mv.visitLabel(l12);
mv.visitLineNumber(1112, l12);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l11);
mv.visitLineNumber(1113, l11);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l13 = new Label();
mv.visitLabel(l13);
mv.visitLineNumber(1115, l13);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ISTORE, 7);
Label l14 = new Label();
mv.visitLabel(l14);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 4);
Label l15 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l15);
Label l16 = new Label();
mv.visitLabel(l16);
mv.visitLineNumber(1116, l16);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitIincInsn(1, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 7);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "charAt", "(I)C");
mv.visitInsn(CASTORE);
Label l17 = new Label();
mv.visitLabel(l17);
mv.visitLineNumber(1115, l17);
mv.visitIincInsn(7, 1);
mv.visitJumpInsn(GOTO, l14);
mv.visitLabel(l15);
mv.visitLineNumber(1117, l15);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 6);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l18 = new Label();
mv.visitLabel(l18);
mv.visitLineNumber(1118, l18);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(IZ)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1140, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(Z)Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(IC)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1167, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 3);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(1168, l1);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(1169, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "expandCapacity", "(I)V");
mv.visitLabel(l2);
mv.visitLineNumber(1170, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(1171, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(CASTORE);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(1172, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitFieldInsn(PUTFIELD, "java/lang/AbstractStringBuilder", "count", "I");
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(1173, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(II)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1195, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(I)Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(IJ)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1217, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(LLOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(J)Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(IF)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1239, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(FLOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(F)Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "insert", "(ID)Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1261, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(DLOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(D)Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(Ljava/lang/String;)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1282, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "indexOf", "(Ljava/lang/String;I)I");
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(Ljava/lang/String;I)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1303, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toCharArray", "()[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I");
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "indexOf", "([CII[CIII)I");
mv.visitInsn(IRETURN);
mv.visitMaxs(7, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(Ljava/lang/String;)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1326, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "lastIndexOf", "(Ljava/lang/String;I)I");
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(Ljava/lang/String;I)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1347, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toCharArray", "()[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I");
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "lastIndexOf", "([CII[CIII)I");
mv.visitInsn(IRETURN);
mv.visitMaxs(7, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "reverse", "()Ljava/lang/AbstractStringBuilder;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1374, l0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(1375, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 2);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(1376, l2);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISHR);
mv.visitVarInsn(ISTORE, 3);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitVarInsn(ILOAD, 3);
Label l4 = new Label();
mv.visitJumpInsn(IFLT, l4);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(1377, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 4);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(1378, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 5);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(1379, l7);
mv.visitVarInsn(ILOAD, 1);
Label l8 = new Label();
mv.visitJumpInsn(IFNE, l8);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLineNumber(1380, l9);
mv.visitVarInsn(ILOAD, 4);
mv.visitLdcInsn(new Integer(55296));
Label l10 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l10);
mv.visitVarInsn(ILOAD, 4);
mv.visitLdcInsn(new Integer(57343));
Label l11 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l11);
mv.visitLabel(l10);
mv.visitVarInsn(ILOAD, 5);
mv.visitLdcInsn(new Integer(55296));
Label l12 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l12);
mv.visitVarInsn(ILOAD, 5);
mv.visitLdcInsn(new Integer(57343));
mv.visitJumpInsn(IF_ICMPGT, l12);
mv.visitLabel(l11);
mv.visitInsn(ICONST_1);
Label l13 = new Label();
mv.visitJumpInsn(GOTO, l13);
mv.visitLabel(l12);
mv.visitInsn(ICONST_0);
mv.visitLabel(l13);
mv.visitVarInsn(ISTORE, 1);
mv.visitLabel(l8);
mv.visitLineNumber(1383, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(CASTORE);
Label l14 = new Label();
mv.visitLabel(l14);
mv.visitLineNumber(1384, l14);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(CASTORE);
Label l15 = new Label();
mv.visitLabel(l15);
mv.visitLineNumber(1376, l15);
mv.visitIincInsn(3, -1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l4);
mv.visitLineNumber(1386, l4);
mv.visitVarInsn(ILOAD, 1);
Label l16 = new Label();
mv.visitJumpInsn(IFEQ, l16);
Label l17 = new Label();
mv.visitLabel(l17);
mv.visitLineNumber(1388, l17);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l18 = new Label();
mv.visitLabel(l18);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "count", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitJumpInsn(IF_ICMPGE, l16);
Label l19 = new Label();
mv.visitLabel(l19);
mv.visitLineNumber(1389, l19);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 4);
Label l20 = new Label();
mv.visitLabel(l20);
mv.visitLineNumber(1390, l20);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isLowSurrogate", "(C)Z");
Label l21 = new Label();
mv.visitJumpInsn(IFEQ, l21);
Label l22 = new Label();
mv.visitLabel(l22);
mv.visitLineNumber(1391, l22);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 5);
Label l23 = new Label();
mv.visitLabel(l23);
mv.visitLineNumber(1392, l23);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isHighSurrogate", "(C)Z");
mv.visitJumpInsn(IFEQ, l21);
Label l24 = new Label();
mv.visitLabel(l24);
mv.visitLineNumber(1393, l24);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 3);
mv.visitIincInsn(3, 1);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(CASTORE);
Label l25 = new Label();
mv.visitLabel(l25);
mv.visitLineNumber(1394, l25);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(CASTORE);
mv.visitLabel(l21);
mv.visitLineNumber(1388, l21);
mv.visitIincInsn(3, 1);
mv.visitJumpInsn(GOTO, l18);
mv.visitLabel(l16);
mv.visitLineNumber(1399, l16);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "toString", "()Ljava/lang/String;", null, null);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_FINAL, "getValue", "()[C", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1418, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/AbstractStringBuilder", "value", "[C");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC, "append", "(C)Ljava/lang/Appendable;", null, new String[] { "java/io/IOException" });
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(24, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(C)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;", null, new String[] { "java/io/IOException" });
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(24, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC, "append", "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;", null, new String[] { "java/io/IOException" });
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(24, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "append", "(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;");
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(603, l0);
mv.visitIntInsn(BIPUSH, 10);
mv.visitIntInsn(NEWARRAY, T_INT);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_0);
mv.visitIntInsn(BIPUSH, 9);
mv.visitInsn(IASTORE);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_1);
mv.visitIntInsn(BIPUSH, 99);
mv.visitInsn(IASTORE);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_2);
mv.visitIntInsn(SIPUSH, 999);
mv.visitInsn(IASTORE);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_3);
mv.visitIntInsn(SIPUSH, 9999);
mv.visitInsn(IASTORE);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_4);
mv.visitLdcInsn(new Integer(99999));
mv.visitInsn(IASTORE);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_5);
mv.visitLdcInsn(new Integer(999999));
mv.visitInsn(IASTORE);
mv.visitInsn(DUP);
mv.visitIntInsn(BIPUSH, 6);
mv.visitLdcInsn(new Integer(9999999));
mv.visitInsn(IASTORE);
mv.visitInsn(DUP);
mv.visitIntInsn(BIPUSH, 7);
mv.visitLdcInsn(new Integer(99999999));
mv.visitInsn(IASTORE);
mv.visitInsn(DUP);
mv.visitIntInsn(BIPUSH, 8);
mv.visitLdcInsn(new Integer(999999999));
mv.visitInsn(IASTORE);
mv.visitInsn(DUP);
mv.visitIntInsn(BIPUSH, 9);
mv.visitLdcInsn(new Integer(2147483647));
mv.visitInsn(IASTORE);
mv.visitFieldInsn(PUTSTATIC, "java/lang/AbstractStringBuilder", "sizeTable", "[I");
mv.visitInsn(RETURN);
mv.visitMaxs(4, 0);
mv.visitEnd();
}
cw.visitEnd();

return cw.toByteArray();
}
}
